package simpledb;

import java.io.*;
import java.util.*;

/**
 * HeapFile is an implementation of a DbFile that stores a collection of tuples
 * in no particular order. Tuples are stored on pages, each of which is a fixed
 * size, and the file is simply a collection of those pages. HeapFile works
 * closely with HeapPage. The format of HeapPages is described in the HeapPage
 * constructor.
 *
 * @author Sam Madden
 * @see simpledb.HeapPage#HeapPage
 */
public class HeapFile implements DbFile {
	
	private File f;
	private TupleDesc td;

    /**
     * Constructs a heap file backed by the specified file.
     *
     * @param f the file that stores the on-disk backing store for this heap
     *          file.
     */
    public HeapFile(File f, TupleDesc td) {
        // some code goes here
    	this.f = f;
    	this.td = td;
    }

    /**
     * Returns the File backing this HeapFile on disk.
     *
     * @return the File backing this HeapFile on disk.
     */
    public File getFile() {
        // some code goes here
        return this.f;
    }

    /**
     * Returns an ID uniquely identifying this HeapFile. Implementation note:
     * you will need to generate this tableid somewhere ensure that each
     * HeapFile has a "unique id," and that you always return the same value for
     * a particular HeapFile. We suggest hashing the absolute file name of the
     * file underlying the heapfile, i.e. f.getAbsoluteFile().hashCode().
     *
     * @return an ID uniquely identifying this HeapFile.
     */
    public int getId() {
        // some code goes here
        return f.getAbsoluteFile().hashCode();
    }

    /**
     * Returns the TupleDesc of the table stored in this DbFile.
     *
     * @return TupleDesc of this DbFile.
     */
    public TupleDesc getTupleDesc() {
    	return this.td;
    }
    
    // see DbFile.java for javadocs
    public Page readPage(PageId pid) {
        if (pid.getTableId() != getId())
        	throw new IllegalArgumentException();
        
        try{
        	InputStream input = new BufferedInputStream(new FileInputStream(f));
        	
        	byte[] data = new byte[BufferPool.getPageSize()];
        	
        	int offset = pid.pageNumber() * BufferPool.getPageSize();
        	
        	input.read(data, offset, BufferPool.getPageSize());
        	input.close();
        	
        	return new HeapPage((HeapPageId) pid, data);
        	}
        catch (FileNotFoundException e){
        	System.err.println("File not found");
        }
        catch (IOException e1){
        	e1.printStackTrace();
        }
        
        return null;
    }

    // see DbFile.java for javadocs
    public void writePage(Page page) throws IOException {
        // some code goes here
        // not necessary for lab1
    }

    /**
     * Returns the number of pages in this HeapFile.
     */
    public int numPages() {
        return (int) Math.ceil(f.length() / BufferPool.getPageSize());
    }

    // see DbFile.java for javadocs
    public ArrayList<Page> insertTuple(TransactionId tid, Tuple t)
            throws DbException, IOException, TransactionAbortedException {
        // some code goes here
        return null;
        // not necessary for lab1
    }

    // see DbFile.java for javadocs
    public ArrayList<Page> deleteTuple(TransactionId tid, Tuple t) throws DbException,
            TransactionAbortedException {
        // some code goes here
        return null;
        // not necessary for lab1
    }

    // see DbFile.java for javadocs
    public DbFileIterator iterator(TransactionId tid) {
        // some code goes here
        return new fileIterator(tid);
    }
    
    private class fileIterator implements DbFileIterator{
    	
    	private int currPageNo;
    	private Iterator<Tuple> tuplesCurrPage;
    	private TransactionId tid;
    	
    	//constructor
    	public fileIterator(TransactionId tid){
    		this.currPageNo = 0;
    		this.tuplesCurrPage = null;
    		this.tid = tid;
    	}
    	
    	public void open() throws DbException, TransactionAbortedException{
    		if (currPageNo >= numPages())
    			throw new DbException("No page to open an iterator");
    		
    		//Able to open
    		HeapPage pg = (HeapPage) Database.getBufferPool().getPage(tid, new HeapPageId(getId(), currPageNo), Permissions.READ_ONLY);
    		tuplesCurrPage = pg.iterator();
    	}
    	
    	public boolean hasNext() throws DbException, TransactionAbortedException{
    		if (tuplesCurrPage == null)
    			throw new DbException("iterator not opened");
    		
    		if (tuplesCurrPage.hasNext())
    			return true;
    		
    		//No tuple left on this page, move to the next page
    		currPageNo++;
    		
    		//keep checking through every page to find a tuple
    		while (currPageNo < numPages()){    		
	    		HeapPage pg = (HeapPage) Database.getBufferPool().getPage(tid, new HeapPageId(getId(), currPageNo), Permissions.READ_ONLY);
	    		tuplesCurrPage = pg.iterator();
	    		if (tuplesCurrPage.hasNext())
	    			return true;
	    		else
	    			currPageNo++;
    		}
    		
    		return false;
    	}
    	
    	public Tuple next() throws DbException, TransactionAbortedException, NoSuchElementException{
    		if (!hasNext())
    			throw new NoSuchElementException();
    		
    		return tuplesCurrPage.next();
    	}
    	
    	public void rewind() throws DbException, TransactionAbortedException{
    		close();
    		open();
    	}
    	
    	public void close(){
    		currPageNo = 0;
    		tuplesCurrPage = null;
    		tid = null;
    	}
    }

}

