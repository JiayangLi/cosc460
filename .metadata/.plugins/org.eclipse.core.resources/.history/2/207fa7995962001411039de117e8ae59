package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    
    private JoinPredicate p;
    private DbIterator child1;
    private DbIterator child2;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     *
     * @param p      The predicate to use to join the children
     * @param child1 Iterator for the left(outer) relation to join
     * @param child2 Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        this.p = p;
        this.child1 = child1;
        this.child2 = child2;
    }

    public JoinPredicate getJoinPredicate() {
        return p;
    }

    /**
     * @return the field name of join field1. Should be quantified by
     * alias or table name.
     */
    public String getJoinField1Name() {
        return child1.getTupleDesc().getFieldName(p.getField1());
    }

    /**
     * @return the field name of join field2. Should be quantified by
     * alias or table name.
     */
    public String getJoinField2Name() {
        return child2.getTupleDesc().getFieldName(p.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     * implementation logic.
     */
    public TupleDesc getTupleDesc() {
        TupleDesc td1 = child1.getTupleDesc();
        TupleDesc td2 = child2.getTupleDesc();
        return TupleDesc.merge(td1, td2);
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        super.open();
        child1.open();
        child2.open();
    }

    public void close() {
        super.close();
        child1.close();
        child2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        child1.rewind();
        child2.rewind();
    }
    
    private Tuple t1 = null;    //tuples in outer loop(child1)
    private Tuple t2 = null;    //tuples in inner loop(child2)
    
    /**
     * A private helper method to merge two tuples by concatenating tuples
     * from left to right 
     * @param t1 the first tuple to join
     * @param t2 the second tuple to join
     * @return the merged tuple
     */
    private Tuple joinTuples(Tuple t1, Tuple t2){
        TupleDesc joinedTD = getTupleDesc();
        Tuple joinedTuple = new Tuple(joinedTD);
        
        for (int i = 0; i < joinedTD.numFields(); i++){
            if (i < t1.getTupleDesc().numFields())
                joinedTuple.setField(i, t1.getField(i));
            else
                joinedTuple.setField(i, t2.getField(i - t1.getTupleDesc().numFields()));
        }
        
        return joinedTuple;
    }
    
    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p/>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p/>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        if (t1 == null && child1.hasNext())
            t1 = child1.next();
        
        while (true){
            while (child2.hasNext()){
                t2 = child2.next();
                
                System.out.println("hahahaha t1 " + t1==null);
                System.out.println("hahahaha t2 " + t2==null);
                System.out.println("hahahaha p " + p==null);
                
                if (p.filter(t1, t2)){
                    return joinTuples(t1, t2);
                }
            }
            child2.rewind();
            if (child1.hasNext())
                t1 = child1.next();
            else
                break;
        }
        return null;
    }

    @Override
    public DbIterator[] getChildren() {
        return new DbIterator[]{child1, child2};
    }

    @Override
    public void setChildren(DbIterator[] children) {
        if (children == null)
            throw new NullPointerException();
        
        child1 = children[0];
        child2 = children[1];
    }

}
