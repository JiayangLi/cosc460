package simpledb;

import java.util.*;
import java.util.concurrent.ConcurrentHashMap;

/**
 * TableStats represents statistics (e.g., histograms) about base tables in a
 * query.
 * <p/>
 * This class is not needed in implementing lab1|lab2|lab3.                                                   // cosc460
 */
public class TableStats {

    private static final ConcurrentHashMap<String, TableStats> statsMap = new ConcurrentHashMap<String, TableStats>();

    static final int IOCOSTPERPAGE = 1000;

    public static TableStats getTableStats(String tablename) {
        return statsMap.get(tablename);
    }

    public static void setTableStats(String tablename, TableStats stats) {
        statsMap.put(tablename, stats);
    }

    public static void setStatsMap(HashMap<String, TableStats> s) {
        try {
            java.lang.reflect.Field statsMapF = TableStats.class.getDeclaredField("statsMap");
            statsMapF.setAccessible(true);
            statsMapF.set(null, s);
        } catch (NoSuchFieldException e) {
            e.printStackTrace();
        } catch (SecurityException e) {
            e.printStackTrace();
        } catch (IllegalArgumentException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        }

    }

    public static Map<String, TableStats> getStatsMap() {
        return statsMap;
    }

    public static void computeStatistics() {
        Iterator<Integer> tableIt = Database.getCatalog().tableIdIterator();

        System.out.println("Computing table stats.");
        while (tableIt.hasNext()) {
            int tableid = tableIt.next();
            TableStats s = new TableStats(tableid, IOCOSTPERPAGE);
            setTableStats(Database.getCatalog().getTableName(tableid), s);
        }
        System.out.println("Done.");
    }

    /**
     * Number of bins for the histogram. Feel free to increase this value over
     * 100, though our tests assume that you have at least 100 bins in your
     * histograms.
     */
    static final int NUM_HIST_BINS = 100;
    
    //helper variables for constructing table stats
    //key - field index; value - number of distinct values in that field
	private HashMap<Integer, Integer> numDistinctValues;	
	
	//key -field name; value - max value in that int field
	private HashMap<Integer, Integer> maxValues;
    
    //key - field name; value - min value in that int field
	private HashMap<Integer, Integer> minValues;
        
    //a hashMap for all integer fields
    private HashMap<Integer, IntHistogram> intHistograms;	//key - field index; value - intHistogram for that field
    
    //a hashMap for all String fields
    private HashMap<Integer, StringHistogram> stringHistograms;	//key - field index; value - stringHistogram for that field
    
    private int numPages;	//number of pages in this table
    private int numTuples = 0; 	//number of tuples in this table
    
    private int ioCostPerPage;
    
    
        
    /**
     * Create a new TableStats object, that keeps track of statistics on each
     * column of a table
     *
     * @param tableid       The table over which to compute statistics
     * @param ioCostPerPage The cost per page of IO. This doesn't differentiate between
     *                      sequential-scan IO and disk seeks.
     */
    public TableStats(int tableid, int ioCostPerPage) {
        // For this function, you'll have to get the
        // DbFile for the table in question,
        // then scan through its tuples and calculate
        // the values that you need.
        // You should try to do this reasonably efficiently, but you don't
        // necessarily have to (for example) do everything
        // in a single scan of the table.
    	
        this.ioCostPerPage = ioCostPerPage;
        this.numDistinctValues = new HashMap<Integer, Integer>();
        this.maxValues = new HashMap<Integer, Integer>();
        this.minValues = new HashMap<Integer, Integer>();
        
        establishHelperVariables(tableid);
    	
        this.intHistograms = new HashMap<Integer, IntHistogram>();
        this.stringHistograms = new HashMap<Integer, StringHistogram>();
        
        createHistograms(tableid);
    }
    
    private void establishHelperVariables(int tableid){     
    	//store distinct values for each int field
        HashMap<Integer, HashSet<Integer>> distinctIntValues = new HashMap<Integer, HashSet<Integer>>();
        //store distinct values for each string field
        HashMap<Integer, HashSet<String>> distinctStrValues = new HashMap<Integer, HashSet<String>>();
        
        HeapFile hf = (HeapFile) Database.getCatalog().getDatabaseFile(tableid);
        TupleDesc td = hf.getTupleDesc();
        
        this.numPages = hf.numPages();
        
        DbFileIterator dbi = hf.iterator(null);
        
        try{
        	dbi.open();
        	while (dbi.hasNext()){
        		Tuple t = dbi.next();
        		
        		this.numTuples++;	//keep track of total number of tuples
        		
        		for (int i = 0; i < td.numFields(); i++){
        			switch (td.getFieldType(i)){
        				case INT_TYPE:
        					//get field value
        					int val = ((IntField) t.getField(i)).getValue();
        					
        					//update maxValues
        					if (!maxValues.containsKey(i)){	//first time encountering this field
        						maxValues.put(i, val);
        					}
        					else{	//already encountered this field before
        						if (maxValues.get(i) < val){
        							maxValues.put(i, val);	//replace the old value
        						}
        					}
        					
        					//update minValues
        					if (!minValues.containsKey(i)){	//first time encountering this field
        						minValues.put(i, val);
        					}
        					else{	//already encountered this field before
        						if (minValues.get(i) > val){
        							minValues.put(i, val);	//replace the old value
        						}
        					}
        					
        					//update distinctIntValues
        					if (!distinctIntValues.containsKey(i)){	//first time encountering this field
        						HashSet<Integer> hs = new HashSet<Integer>();
        						hs.add(val);
        						distinctIntValues.put(i, hs);
        					}
        					else{	//already encountered this field before
        						if (!distinctIntValues.get(i).contains(val)){
        							distinctIntValues.get(i).add(val);
        						}
        					}
        					break;
        					
        				case STRING_TYPE:
        					String strVal = ((StringField) t.getField(i)).getValue();
        					
        					//only update distinctStrValues
        					if (!distinctStrValues.containsKey(i)){	//first time encountering this field
        						HashSet<String> hs = new HashSet<String>();
        						hs.add(strVal);
        						distinctStrValues.put(i, hs);
        					}
        					else{	//already encountered this field before
        						if (!distinctStrValues.get(i).contains(strVal)){
        							distinctStrValues.get(i).add(strVal);
        						}
        					}
        					break;
        			}
        		}
        	} //end of dbi.hasNext() while 
        	
        	dbi.close();
        	
        	//minValues and maxValues are ready
        	//set up NumDistinctValues
        	for (int i = 0; i < td.numFields(); i++){
        		if (distinctIntValues.containsKey(i)){	//field i is an int field
        			numDistinctValues.put(i, distinctIntValues.get(i).size());
        		}
        		else{	//field i is a string field
        			numDistinctValues.put(i, distinctStrValues.get(i).size());
        		}
        	}
        }
        catch(DbException e){
        	e.printStackTrace();
        }
        catch(TransactionAbortedException e){
        	e.printStackTrace();
        }
        catch(NoSuchElementException e){
        	e.printStackTrace();
        }
    }
    
    private void createHistograms(int tableid){
    	HeapFile hf = (HeapFile) Database.getCatalog().getDatabaseFile(tableid);
    	
    	TupleDesc td = hf.getTupleDesc();
    	
    	DbFileIterator dbi = hf.iterator(null);
    	
    	try{
    		dbi.open();
        	while (dbi.hasNext()){
        		Tuple t = dbi.next();
        		
        		for (int i = 0; i < td.numFields(); i++){
        			switch (td.getFieldType(i)){
        				case INT_TYPE:
        					//get field value
        					int val = ((IntField) t.getField(i)).getValue();
        					
        					//update intHistograms
        					if (!intHistograms.containsKey(i)){	//first time encountering this field
        						IntHistogram ih = new IntHistogram(NUM_HIST_BINS, minValues.get(i), maxValues.get(i));
        						ih.addValue(val);
        						intHistograms.put(i, ih);
        					}
        					else{	//already encountered this field before
        						intHistograms.get(i).addValue(val);
        					}
        					break;
        				case STRING_TYPE:
        					//get field value
        					String strVal = ((StringField) t.getField(i)).getValue();
        					
        					//update intHistograms
        					if (!stringHistograms.containsKey(i)){	//first time encountering this field
        						StringHistogram sh = new StringHistogram(NUM_HIST_BINS);
        						sh.addValue(strVal);
        						stringHistograms.put(i, sh);
        					}
        					else{	//already encountered this field before
        						stringHistograms.get(i).addValue(strVal);
        					}
        					break;
        			}
        		}
        		
        	} // end of dbi.hasNext() while
        	dbi.close();
    	}
    	catch(DbException e){
        	e.printStackTrace();
        }
        catch(TransactionAbortedException e){
        	e.printStackTrace();
        }
        catch(NoSuchElementException e){
        	e.printStackTrace();
        }
    	
    }

    /**
     * Estimates the cost of sequentially scanning the file, given that the cost
     * to read a page is costPerPageIO. You can assume that there are no seeks
     * and that no pages are in the buffer pool.
     * <p/>
     * Also, assume that your hard drive can only read entire pages at once, so
     * if the last page of the table only has one tuple on it, it's just as
     * expensive to read as a full page. (Most real hard drives can't
     * efficiently address regions smaller than a page at a time.)
     *
     * @return The estimated cost of scanning the table.
     */
    public double estimateScanCost() {
        return ((double) numPages) * ioCostPerPage;
    }

    /**
     * This method returns the number of tuples in the relation, given that a
     * predicate with selectivity selectivityFactor is applied.
     *
     * @param selectivityFactor The selectivity of any predicates over the table
     * @return The estimated cardinality of the scan with the specified
     * selectivityFactor
     */
    public int estimateTableCardinality(double selectivityFactor) {
        return (int) (numTuples * selectivityFactor);
    }

    /**
     * This method returns the number of distinct values for a given field.
     * If the field is a primary key of the table, then the number of distinct
     * values is equal to the number of tuples.  If the field is not a primary key
     * then this must be explicitly calculated.  Note: these calculations should
     * be done once in the constructor and not each time this method is called. In
     * addition, it should only require space linear in the number of distinct values
     * which may be much less than the number of values.
     *
     * @param field the index of the field
     * @return The number of distinct values of the field.
     */
    public int numDistinctValues(int field) {
        if (!numDistinctValues.containsKey(field))
        	throw new NoSuchElementException();
        
        return numDistinctValues.get(field);
    }

    /**
     * Estimate the selectivity of predicate <tt>field op constant</tt> on the
     * table.
     *
     * @param field    The field over which the predicate ranges
     * @param op       The logical operation in the predicate
     * @param constant The value against which the field is compared
     * @return The estimated selectivity (fraction of tuples that satisfy) the
     * predicate
     */
    public double estimateSelectivity(int field, Predicate.Op op, Field constant) {
        // some code goes here
        return 1.0;
    }

}
