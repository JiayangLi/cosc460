Report for Lab 3
----------------

After you complete lab 5, please answer the following questions.

1. What is your name?  If you work with a partner, be sure to write both of your names.

	Jiayang (JY) Li and David Huang.

2. What did you think of this assignment?

	Concurrency is hard, especially in terms of debugging. Sometimes it's difficult to tell where in the code is wrong.

3. What was the hardest part of this assignment?

	Implementing the lock manager.

4. Describe any missing or incomplete elements of your code.

	Hopefully not.

5. Roughly how long did you spend working on this lab?

	4 hours.

6. Describe your lock manager implementation.  Here are some specific questions to answer:

a) Where is your lock manager located?  (I.e., is it a separate class, part of BufferPool, etc.)

	It's part of BufferPool.

b) What specific information do you store and how do you store it?  

	I have two hashmaps to keep track of the exclusive and shared locks that have been granted thus far. 
	Both maps have pageid as the key.
	The exclusive hashmap maps a page to a transaction holding an exclusive lock on that page.
	The shared lock hashmap maps a page to a set of transactions holding a shared lock on that page.

c) Briefly describe what happens when a new transaction requests a page.  I.e., walk thru how the lock manager decides whether or not to grant the request.  Your description should reference the data structures that describe in part (b).

	If a transaction requests an exclusive lock, the lock manager only grants the request when no other transaction has the exclusive lock on this page and there is no shared lock on this page or the requesting transaction itself holds
	the only shared lock on this page (lock upgrade). If the lock manager grants the request, it puts a pid-tid pair in exclusive lock hashmap.
	
	If a transaction requests a shared lock, the lock manager only grants the request when there is no exclusive lock on this page or the requesting transaction itself holds the exclusive lock on this page.
	If the lock manager grants the request, it first checks if this pid is already in the hashmap. If it is, add the requesting tid into the hashset associated with the pid; otherwise, create a new hashset with this tid and put this pid and
	the newly created hashset into the hashmap.

d) Briefly explain how you manage locks when inserting a tuple into a HeapFile.  In particular, how do you acquire/release locks when looking for a page to insert.

	(Replace this text with your answer)
