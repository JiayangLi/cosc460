Lab 4 Code Walk
---------------

Walk thru 1: simpledb.Parser.main() and simpledb.Parser.start()

	simpledb.Parser.main() is the entry point for the SimpleDB system. It calls simpledb.Parser.start(). The latter performs three main actions:
		1) It populates the SimpleDB catalog from the catalog text file provided by the user as argument (Database.getCatalog().loadSchema(argv[0]);).
		2) For each table defined in the system catalog, it computes statistics over the data in the table by calling: TableStats.computeStatistics(), which then does: TableStats s = new TableStats(tableid, IOCOSTPERPAGE);
		3) It processes the statements submitted by the user (processNextStatement(new ByteArrayInputStream(statementBytes));)

Walk thru 2: simpledb.Parser.processNextStatement()

	This method takes in the user input and attempts to parse it as SQL, using
	the Zql parsing library.  This method handles bad user input, as well as valid SQL statements include INSERT, DELETE, and SELECT statements.  

	We focus on the SELECT statement which is handled by 
		handleQueryStatement((ZQuery)s)
	This returns a Query object, which is then executed by calling
		query.execute();

Walk thru 3: simpledb.Parser.handleQueryStatement()

	1)This method generates a logical and physical plan associated with the given query statement
	2)prints out the query plan if it is available
	3)returns a Query object containing the logical and physical plan

Walk thru 4: simpledb.Parser.parseQueryLogicalPlan()

	This method returns a logical plan representing the given query statement through the following steps:
	
	1)iterates through every table in the FROM clause, obtain each table name (or alias if available) and add a scan
	  to the logical plan for each table. If any table does not exist, an exception will be thrown.
	2)iterates through the WHERE clause, add filter and join to the logical plan as needed using parseExpression method.
	  Any nested subquery will cause an exception to be thrown.
	3)iterates through the GROUP BY clause, save the groupByField (if any). More than 1 group by field will cause an exception.
	4)iterates through the SELECT clause, add project to the logical plan for each select item (if the select item is an
	  aggregate, its project also contains the aggregate function), add aggregate to the logical plan if there is any 
	  aggregate field.
	5)iterates through the ORDER BY clause, add order by to the logical plan if there is only one order by that is not 
	  complex; an exception will be thrown otherwise.	  

	Note: this method is rather long and complex.  Your walk thru should focus
	on the high-level ideas.  Specifically, explain how SQL query is processed to construct the LogicalPlan.  
 
Walk thru 5: simpledb.LogicalPlan.physicalPlan()

	Your walk thru should explain how these data structures are used:
		- equivMap
		- filterSelectivities
		- statsMap
		- subplanMap

	subplanMap is the breakdown of the physical plan into a series of iterators.

	statsMap keeps track of table stats (histograms) about different tables.

	filterSelectivity keeps track of the selectivity of every filter on different tables, be it a base table or an intermediate relation.

	equivMap is used when joining two tables. It captures the fact that two tables after a join refer to the same, joined table.

	The physical plan is a tree of iterators, this method returns the top project iterator in the following steps:

	1)create a seqscan for each scan node (base table), initialize subplanMap, statsMap and filterSelectivity with those base tables
	2)iterates through all filters of the logical plan, and for each filter, update subplanMap, as well as filterSelectivities with the estimated selectivity.
	3)optimizes the order of joins, iterates through the optimized joins, for each join, update subplanMap. If the join is on two base tables, remove one from 
	  subplanMap and update equivMap to show that now the two tables refer to a joined table.
	4)iterates through the select list, pick out aggregate, build the field list, type list and right iterator for project.

Walk thru 6: simpledb.JoinOptimizer.orderJoins()

	<fill this in>

Walk thru 7: JoinOptimizer.computeCostAndCardOfSubplan()

	<fill this in>

Walk thru 8: JoinOptimizer.estimateJoinCost()

	<fill this in>

Walk thru 9: JoinOptimizer.estimateJoinCardinality()

	<fill this in>

Walk thru 10 query.execute()
	
	Note: This is called inside simpledb.Parser.processNextStatement().  Refer back to Walk thru 2.

	<fill this in>

