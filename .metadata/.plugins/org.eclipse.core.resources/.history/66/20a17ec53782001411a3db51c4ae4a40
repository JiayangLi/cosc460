package simpledb;

import java.io.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.Queue;

/**
 * BufferPool manages the reading and writing of pages into memory from
 * disk. Access methods call into it to retrieve pages, and it fetches
 * pages from the appropriate location.
 * <p/>
 * The BufferPool is also responsible for locking;  when a transaction fetches
 * a page, BufferPool checks that the transaction has the appropriate
 * locks to read/write the page.
 *
 * @Threadsafe, all fields are final
 */
public class BufferPool {	
    /**
     * Bytes per page, including header.
     */
    public static final int PAGE_SIZE = 4096;

    private static int pageSize = PAGE_SIZE;

    /**
     * Default number of pages passed to the constructor. This is used by
     * other classes. BufferPool should use the numPages argument to the
     * constructor instead.
     */
    public static final int DEFAULT_PAGES = 50;
    
    private HashMap<PageId, Page> cache;	//use a HashMap as cache
    private HashMap<PageId, Long> times;	//use a HashMap to keep track of access times	
    private int numPages;	//cache's size
    
    private LockManager lm;

    /**
     * Creates a BufferPool that caches up to numPages pages.
     *
     * @param numPages maximum number of pages in this buffer pool.
     */
    public BufferPool(int numPages) {
    	cache = new HashMap<PageId, Page>();
    	times = new HashMap<PageId, Long>();
    	this.numPages = numPages;
    	
    	lm = new LockManager();
    }
    
    public LockManager getLockManager(){
    	return this.lm;
    }

    public static int getPageSize() {
        return pageSize;
    }

    // THIS FUNCTION SHOULD ONLY BE USED FOR TESTING!!
    public static void setPageSize(int pageSize) {
        BufferPool.pageSize = pageSize;
    }
    
    /**
     * Update the access time for a given page
     * @param pid	the ID of the page whose acces time needs updating
     */
    private void updateTime(PageId pid){
    	if (!times.containsKey(pid))
    		throw new NoSuchElementException("page not in cache");
    	
    	times.put(pid, System.currentTimeMillis());
    } 

    /**
     * Retrieve the specified page with the associated permissions.
     * Will acquire a lock and may block if that lock is held by another
     * transaction.
     * <p/>
     * The retrieved page should be looked up in the buffer pool.  If it
     * is present, it should be returned.  If it is not present, it should
     * be added to the buffer pool and returned.  If there is insufficient
     * space in the buffer pool, an page should be evicted and the new page
     * should be added in its place.
     *
     * @param tid  the ID of the transaction requesting the page
     * @param pid  the ID of the requested page
     * @param perm the requested permissions on the page
     */
    public Page getPage(TransactionId tid, PageId pid, Permissions perm)
            throws TransactionAbortedException, DbException{
    	
    	try {
			lm.acquireLock(pid, tid, perm);
		} catch (IOException e) {
			e.printStackTrace();
		}
    	
    	// if the requested page is already cached
    	if (cache.containsKey(pid)){
    		updateTime(pid);
    		return cache.get(pid);
    	}
    	
    	// if the cache is full, evictPage
    	while (cache.size() >= numPages){
    		evictPage();
    	}
    	
    	// read the page, and put it in the cache
    	int tableId = pid.getTableId();
    	Page toReturn = Database.getCatalog().getDatabaseFile(tableId).readPage(pid);
    	cache.put(pid, toReturn);
    	times.put(pid, System.currentTimeMillis());
    	return toReturn;
    }
    

    /**
     * Releases the lock on a page.
     * Calling this is very risky, and may result in wrong behavior. Think hard
     * about who needs to call this and why, and why they can run the risk of
     * calling it.
     *
     * @param tid the ID of the transaction requesting the unlock
     * @param pid the ID of the page to unlock
     */
    public void releasePage(TransactionId tid, PageId pid) {
        lm.releaseLock(pid, tid);
    }

    /**
     * Release all locks associated with a given transaction.
     *
     * @param tid the ID of the transaction requesting the unlock
     */
    public void transactionComplete(TransactionId tid) throws IOException {
        transactionComplete(tid, true);
    }

    /**
     * Return true if the specified transaction has a lock on the specified page
     */
    public boolean holdsLock(TransactionId tid, PageId p) {
        return lm.holdsLock(p, tid);
    }
    
    /**
     * Commit or abort a given transaction; release all locks associated to
     * the transaction.
     *
     * @param tid    the ID of the transaction requesting the unlock
     * @param commit a flag indicating whether we should commit or abort
     */
    public void transactionComplete(TransactionId tid, boolean commit)
            throws IOException {
    	//HashSet<PageId> completed = new HashSet<PageId>();
    	for (PageId pid: cache.keySet()){
    		Page p = cache.get(pid);
    		
    		if (commit && lm.holdsLock(pid, tid)){
    			p.setBeforeImage();
    		}
    		
    		TransactionId dirtier = p.isDirty();
    		if (dirtier != null && dirtier.equals(tid)){
    			if (commit){
        			flushPage(pid);
        		} else {
        			discardPage(pid);
        		}
    		}
    	}
    	lm.releaseAllLocks(tid);
    }

    /**
     * Add a tuple to the specified table on behalf of transaction tid.  Will
     * acquire a write lock on the page the tuple is added to and any other
     * pages that are updated (Lock acquisition is not needed until lab5).                                  // cosc460
     * May block if the lock(s) cannot be acquired.
     * <p/>
     * Marks any pages that were dirtied by the operation as dirty by calling
     * their markDirty bit, and updates cached versions of any pages that have
     * been dirtied so that future requests see up-to-date pages.
     *
     * @param tid     the transaction adding the tuple
     * @param tableId the table to add the tuple to
     * @param t       the tuple to add
     */
    public void insertTuple(TransactionId tid, int tableId, Tuple t)
            throws DbException, IOException, TransactionAbortedException {
        if (tid == null || t == null)
        	throw new NullPointerException();
        
        DbFile table = Database.getCatalog().getDatabaseFile(tableId);
                
        //HeapFile.insertTuple calls getPage, which updates the access time
        ArrayList<Page> pages = table.insertTuple(tid, t);
        
        for (Page pg: pages){
	        //markDirty that page
	        pg.markDirty(true, tid);
	        
	        //update cache
	        cache.put(pg.getId(), pg);
        }
    }

    /**
     * Remove the specified tuple from the buffer pool.
     * Will acquire a write lock on the page the tuple is removed from and any
     * other pages that are updated. May block if the lock(s) cannot be acquired.
     * <p/>
     * Marks any pages that were dirtied by the operation as dirty by calling
     * their markDirty bit, and updates cached versions of any pages that have
     * been dirtied so that future requests see up-to-date pages.
     *
     * @param tid the transaction deleting the tuple.
     * @param t   the tuple to delete
     */
    public void deleteTuple(TransactionId tid, Tuple t)
            throws DbException, IOException, TransactionAbortedException {
    	if (tid == null || t == null)
    		throw new NullPointerException();
    	
    	//find the page where t is located
    	PageId pid = t.getRecordId().getPageId();
    	DbFile table =  Database.getCatalog().getDatabaseFile(pid.getTableId());
    	
    	//there should only be one page in the ArrayList
    	//HeapFile.deleteTuple calls getPage, which updates the access time
    	Page pg = table.deleteTuple(tid, t).get(0);
    	
    	//markDirty that page
    	pg.markDirty(true, tid);
    	
    	//update the cache
    	cache.put(pid, pg);
    }

    /**
     * Flush all dirty pages to disk.
     * NB: Be careful using this routine -- it writes dirty data to disk so will
     * break simpledb if running in NO STEAL mode.
     */
    public synchronized void flushAllPages() throws IOException {
    	//pass every pid into flushPage
    	//check dirty done in flushPage
    	for (PageId pid: cache.keySet()){
    		flushPage(pid);
    	}
    }

    /**
     * Remove the specific page id from the buffer pool.
     * Needed by the recovery manager to ensure that the
     * buffer pool doesn't keep a rolled back page in its
     * cache.
     */
    public synchronized void discardPage(PageId pid) {
    	cache.remove(pid);
    	times.remove(pid);
    }

    /**
     * Flushes a certain page to disk
     *
     * @param pid an ID indicating the page to flush
     */
    private synchronized void flushPage(PageId pid) throws IOException {
        if (pid == null)
        	throw new NullPointerException();
        if (!cache.containsKey(pid))
        	throw new NoSuchElementException("page to flush not in cache");
        
        Page pageToFlush = cache.get(pid);
        
        TransactionId dirtier = pageToFlush.isDirty();
        
        //check if dirty
        if (dirtier != null){
            DbFile table = Database.getCatalog().getDatabaseFile(pid.getTableId());
            
            Database.getLogFile().logWrite(dirtier, pageToFlush.getBeforeImage(), pageToFlush);
            Database.getLogFile().force();
            
            //flush the page to disk
            table.writePage(pageToFlush);
            
          //mark the page as not dirty
            pageToFlush.markDirty(false, null);
        }
    }

    /**
     * Write all pages of the specified transaction to disk.
     */
    public synchronized void flushPages(TransactionId tid) throws IOException {
    	// some code goes here
    	// not necessary for lab1|lab2|lab3|lab4 
    }
    
    /**
     * a private inner class to represent a pid and the time it got accessed
     * for evictPage() method
     */
    private static class TimedPage implements Comparable<TimedPage>{
    
    	public PageId pid;
    	public long time;
    	
    	TimedPage(PageId pid, long time){
    		this.pid = pid;
    		this.time = time;
    	}
    	
    	public int compareTo(TimedPage other){
    		return (int) (this.time - other.time);
    	}
    	
    	public String toString(){
    		return pid.toString() + " " + time;
    	}
    }

    /**
     * Discards a page from the buffer pool.
     * Flushes the page to disk to ensure dirty pages are updated on disk.
     */
    private synchronized void evictPage() throws DbException {	
    	PriorityQueue<TimedPage> pq = new PriorityQueue<TimedPage>();
    	for (PageId pid: times.keySet()){
    		TimedPage tp = new TimedPage(pid, times.get(pid));
    		pq.offer(tp);
    	}
    	    	
    	while (pq.size() > 0){
    		TimedPage p = pq.poll();
    		if (cache.get(p.pid).isDirty() == null){	//clean page
    			//flush the page
    	    	try{
    	    		flushPage(p.pid);
    	    	}
    	    	catch (IOException e){
    	    		e.printStackTrace();
    	    	}
    	    	 	
    	    	//remove from cache
    	    	cache.remove(p.pid);
    	    	times.remove(p.pid);
    	    	return;
    		}
    	}
    	
    	throw new DbException("all pages in the bufferpool are dirty!");
    }
    
    /**
     * Private class for the lock manager
     */
//    class LockManager{
//    	private HashMap<PageId, TransactionId> xlocks;
//    	private HashMap<PageId, HashSet<TransactionId>> slocks;
//    	
//    	public LockManager(){
//    		xlocks = new HashMap<PageId, TransactionId>();
//    		slocks = new HashMap<PageId, HashSet<TransactionId>>();
//    	}
//    	
//    	/**
//    	 * A transaction specified by its tid tries to acquire a lock on
//    	 * a page specified by its pid.
//    	 * @param pid	
//    	 * @param tid
//    	 */
//    	public synchronized void acquireLock(PageId pid, TransactionId tid, Permissions perm) throws IOException, TransactionAbortedException{
//    		boolean waiting = true;
//    		
//    		//check for deadlock
//    		long initial = System.currentTimeMillis();
//    		
//    		while (waiting){
//    			long current = System.currentTimeMillis();
//    			//System.out.println("time different: " + (current - initial));
//    			if (current - initial > 2000){
//    				//transactionComplete(tid, false);
//    				throw new TransactionAbortedException();
//    			}
//    			//if acquire exclusive lock
//    			if (perm.equals(Permissions.READ_WRITE)){
//	    			//synchronized(this){
//	    				//if the requested page doesn't have an exclusive lock yet,
//	    				//grant exclusive lock to the tid only when 1) there is no shared lock on the requested page
//	    				// 2) the tid already has a shared lock and it is the only shared lock (lock upgrade)
//	    
//	    				if (!xlocks.containsKey(pid)){	//no exclusive lock
//	    					
//	    					HashSet<TransactionId> shared = slocks.get(pid);
//	    					if (shared == null || shared.size() == 0){	//no shared lock	
//	    						waiting = false;
//		    					xlocks.put(pid, tid);
//	    					}
//	    					else if (shared.size() == 1 && shared.contains(tid)){	//lock upgrade
//	    						waiting = false;
//	    						xlocks.put(pid, tid);
//	    						shared.remove(tid);
//	    					}
//	    				}
//	    				else if (xlocks.containsKey(pid) && xlocks.get(pid).equals(tid)){	//already has an exclusive lock
//	    					waiting = false;
//	    				}
//	    			//}
//    			} else {	//if acquire shared lock
//    				//synchronized(this){
//    					//grant shared lock to the tid only when 1) the requested page doesn't have an exclusive lock
//    					// 2) the tid already has the exclusive lock on the page
//    				
//    					if (!xlocks.containsKey(pid)){
//    						waiting = false;
//    						if (!slocks.containsKey(pid)){
//    							HashSet<TransactionId> newShared = new HashSet<TransactionId>();
//    							newShared.add(tid);
//    							slocks.put(pid, newShared);
//    						} else {
//    							slocks.get(pid).add(tid);
//    						}
//    					}
//    					else if (xlocks.get(pid).equals(tid)){
//    						waiting = false;
//    					}
//    				//}
//    			}
//    			if (waiting){
//    				try{
//    					Thread.sleep(1);
//    				} catch (InterruptedException e) {}
//    			}
//    		}
//    	}
//    	
//    	/**
//    	 * A transaction specified by its tid tries to unlock a page specified by its pid.
//    	 * @param pid
//    	 * @param tid
//    	 */
//    	public synchronized void releaseLock(PageId pid, TransactionId tid){
//    		//release exclusive lock
//    		if (xlocks.containsKey(pid) && xlocks.get(pid).equals(tid)){
//    			xlocks.remove(pid);
//    		}
//    		
//    		//release shared lock
//    		HashSet<TransactionId> shared = slocks.get(pid);
//    		
//    		if (shared != null){
//    			shared.remove(tid);
//    			if (shared.size() == 0){
//    				slocks.remove(pid);
//    			}
//    		}
//    	}
//    	
//    	/**
//    	 * Return true if the specified transaction has a lock on the specified page
//    	 * @param pid
//    	 * @param tid
//    	 * @return	
//    	 */
//    	public synchronized boolean holdsLock(PageId pid, TransactionId tid){
//    		//check exclusive locks
//    		if (xlocks.containsKey(pid) && xlocks.get(pid).equals(tid)){
//    			return true;
//    		}
//    		
//    		//check shared locks
//    		HashSet<TransactionId> shared = slocks.get(pid);
//    		if (shared != null && shared.contains(tid)){
//    			return true;
//    		} else {
//    			return false;
//    		}
//    	}
//    	
//    	/**
//    	 * release all locks associated with the transaction specified by the given tid
//    	 * @param tid
//    	 */
//    	public synchronized void releaseAllLocks(TransactionId tid){
//    		//release exclusive lock
//    		HashSet<PageId> toRelease = new HashSet<PageId>();
//    		
//    		for (PageId pid: xlocks.keySet()){
//    			if (xlocks.get(pid).equals(tid)){
//    				toRelease.add(pid);
//    			}
//    		}
//    		
//    		for (PageId pid: toRelease){
//    			releaseLock(pid, tid);
//    		}
//    		
//    		toRelease.clear();
//    		
//    		//release shared lock(s)
//    		for (PageId pid: slocks.keySet()){
//    			HashSet<TransactionId> tids = slocks.get(pid);
//    			if (tids.contains(tid)){
//    				toRelease.add(pid);
//    			}
//    		}
//    		
//    		for (PageId pid: toRelease){
//    			releaseLock(pid, tid);
//    		}
//    	}
//    }
    
    static class LockManager{
    	
    	//inner class that represents a lock request
    	static class LockRequest {
    		private static final int EXCLUSIVE = 1;
        	private static final int SAHRED = 2;
        	
        	int type;
        	TransactionId requester;
        	
        	public LockRequest(TransactionId tid, int type){
        		this.type = type;
        		this.requester = tid;
        	}
    	}
    	
    	private HashMap<PageId, TransactionId> xlocks;
    	private HashMap<PageId, HashSet<TransactionId>> slocks;
    	private HashMap<PageId, Queue<LockRequest>> requests;
    	
    	public LockManager(){
    		this.xlocks = new HashMap<PageId, TransactionId>();
    		this.slocks = new HashMap<PageId, HashSet<TransactionId>>();
    		this.requests = new HashMap<PageId, Queue<LockRequest>>();
    	}
    	
    	/**
    	 * Checks if the lock of the specified type on the given page is available for the
    	 * given tid
    	 * @param pid
    	 * @param tid
    	 * @param type
    	 * @return
    	 */
    	private synchronized boolean isLockFree(PageId pid, TransactionId tid, int type){
    		//if the requested page doesn't have an exclusive lock yet,
			//grant exclusive lock to the tid only when 1) there is no shared lock on the requested page
			// 2) the tid already has a shared lock and it is the only shared lock (lock upgrade)
    		if (type == LockRequest.EXCLUSIVE){
    			TransactionId holder = xlocks.get(pid);
    			if (holder == null){ //no exclusive lock on this  page
    				if ()
    			} else if (holder.equals(tid)){//already have the exclusive lock on this page
    				return true;
    			} else { //other tid has the lock on this page
    				return false;
    			}
    		} else if (type == LockRequest.SAHRED){
    			
    		}
    		
    	}
    	
    	
    	
    }

}
